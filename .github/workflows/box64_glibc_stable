name: Box64-Glibc Stable

on:
  workflow_dispatch:              # Manual trigger (any branch)
  schedule:
    - cron: "0 18 * * *"         # Daily (UTC)

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Consistent, strict, and fast shell for all steps (no caching anywhere)
defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

jobs:
  resolve-latest:
    name: Resolve latest stable tag
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      tag:  ${{ steps.tag.outputs.tag }}
      base: ${{ steps.tag.outputs.base }}
    steps:
      - name: Install tools (jq, curl)                     # Minimal deps; no cache
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl ca-certificates

      - name: Resolve latest upstream stable tag (robust)  # Prefer latest release; fallback scans non-prereleases
        id: tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          API="https://api.github.com"
          OWNER="ptitSeb"
          REPO="box64"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-box64-stable-workflow}")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ver[@]}" "${ua[@]}" "$1"; }

          tag="$(fetch "$API/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)"
          if [[ -z "$tag" || "$tag" == "null" ]]; then
            tag="$(fetch "$API/repos/$OWNER/$REPO/releases?per_page=30" \
                   | jq -r '[ .[] | select(.prerelease==false) ][0].tag_name // empty')"
          fi
          [[ -z "$tag" ]] && { echo "::error::Failed to resolve latest stable tag"; exit 1; }

          base="${tag#v}"
          echo "tag=$tag"   >> "$GITHUB_OUTPUT"
          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "Latest stable: $tag (base: $base)"

  gate:
    name: Fast guard (skip if asset already present)
    needs: resolve-latest
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      build: ${{ steps.check.outputs.build }}
    steps:
      - name: Check BOX64-STABLE assets for this version   # Avoid duplicated uploads
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
          BASE:     ${{ needs.resolve-latest.outputs.base }}
        run: |
          API="https://api.github.com"
          want="box64-${BASE}.wcp"
          HTTP="$(curl -s -o /tmp/rel.json -w '%{http_code}' \
                -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
                "$API/repos/${REPO}/releases/tags/BOX64-STABLE" || true)"
          if [ "$HTTP" = "200" ] && jq -e --arg W "$want" '.assets[]?.name == $W' /tmp/rel.json >/dev/null; then
            echo "build=false" >> "$GITHUB_OUTPUT"
            echo "Asset ${want} exists; skip."
          else
            echo "build=true"  >> "$GITHUB_OUTPUT"
            echo "Asset ${want} not found; build needed."
          fi

  ensure-release:
    name: Ensure BOX64-STABLE release body (latest only)
    needs: resolve-latest
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Create/Update release (tag = BOX64-STABLE)   # Keep a single stable bucket
        uses: softprops/action-gh-release@v2
        with:
          name: "BOX64-STABLE"
          tag_name: "BOX64-STABLE"
          prerelease: false
          make_latest: true
          body: "ðŸ¤– Automated BOX64 Glibc stable builds (0.3.6+)\n\nCurrent: ${{ needs.resolve-latest.outputs.base }}"
  
  build-and-append:      
    name: "Build & append ${{ needs.resolve-latest.outputs.base }}"
    needs: [resolve-latest, gate, ensure-release]
    if: needs.gate.outputs.build == 'true'
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Install build tools (lean set; no recommends) # Keep runtime short; no caches
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
              git cmake ninja-build build-essential zstd jq patchelf

      - name: Checkout upstream Box64 at tag                # Exact source snapshot for reproducibility
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          ref: ${{ needs.resolve-latest.outputs.tag }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Configure & build (glibc, Ninja, Release)     # Simple, fast, parallel build
        run: |
          cmake -S src -B src/build -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build src/build -j"$(nproc)"

      - name: Strip binary (remove unneeded symbols)        # Size-only optimization; no performance impact
        run: |
          BIN="src/build/box64"
          [[ -f "$BIN" ]] || { echo "::error::Missing binary: $BIN"; exit 1; }
          if command -v llvm-strip >/dev/null 2>&1; then
            llvm-strip --strip-unneeded "$BIN"
          else
            strip --strip-unneeded "$BIN"
          fi

      - name: Package Box64 WCP (lowercase filename)        # Clean WCP with stable versionName
        env:
          BASE: ${{ needs.resolve-latest.outputs.base }}
        run: |
          DESC="Version ${BASE} Box64 build by Ari"

          mkdir -p Box64_WCP artifacts
          install -m 0755 src/build/box64 Box64_WCP/box64
          
          patchelf --set-interpreter /data/data/com.winlator/files/imagefs/usr/lib/ld-linux-aarch64.so.1 Box64_WCP/box64

          # Build profile.json via jq to ensure valid JSON and safe escaping
          jq -n \
            --arg VER  "${BASE}" \
            --arg DESC "${DESC}" \
            --arg TARGET '${localbin}/box64' \
            '{
              type: "Box64",
              versionName: $VER,        # human-readable (e.g., "0.3.6")
              versionCode: 0,           # integer only; leave 0 for stable streams
              description: $DESC,
              files: [{ source: "box64", target: $TARGET }]
            }' > Box64_WCP/profile.json

          (cd Box64_WCP && tar --zstd -cf "../artifacts/box64-${BASE}.wcp" profile.json box64)

      - name: Upload asset (accumulate to BOX64-STABLE)     # Append asset to stable release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "BOX64-STABLE"
          files: ./artifacts/box64-${{ needs.resolve-latest.outputs.base }}.wcp
