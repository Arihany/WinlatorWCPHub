name: FEXCore
# bylaws LLVM_MINGW 20250920
# 2508+
# ARM64EC disallowed registers hotfix

on:
  workflow_dispatch:
    inputs:
      use_self_hosted:
        type: boolean
        default: false
        description: "true= self-hosted, false= github runner"
      arm64ec_module_hotfix:
        type: boolean
        default: true
        description: "ARM64EC Module.S x23→x12 hotfix"
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: read

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Check Update
    runs-on: ${{ fromJSON( (format('{0}', inputs.use_self_hosted) == 'true' && '["self-hosted"]') || '["ubuntu-latest"]' ) }}
    timeout-minutes: 5
    outputs:
      build:    ${{ steps.detect.outputs.missing }}
      to_build: ${{ steps.detect.outputs.list }}
    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      RELEASE_TAG: FEXCore
      FEX_REPO: ${{ vars.FEX_REPO || 'FEX-Emu/FEX' }}
    steps:
      - name: Install jq, curl (minimal)
        run: |
          sudo apt-get -yqq update
          sudo apt-get -yqq install --no-install-recommends jq curl ca-certificates util-linux

      - name: Collect already-published versions
        id: have
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          HTTP="$(curl -s -o /tmp/rel.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/${RELEASE_TAG}" || true)"
          if [ "$HTTP" = "200" ]; then
            jq -r '.assets[].name' /tmp/rel.json \
              | sed -n -E 's/^FEXCore-([0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
              | LC_ALL=C sort -V > /tmp/exist.txt
          else
            : > /tmp/exist.txt
          fi
          echo "Existing:"; cat /tmp/exist.txt || true

      - name: Detect ALL missing candidates and export list
        id: detect
        env:
          FEX_REPO: ${{ env.FEX_REPO }}
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")

          # Upstream tags (expecting e.g. FEX-2509)
          curl -fsSL "${auth[@]}" "${ver[@]}" "$API/repos/${FEX_REPO}/tags?per_page=100" \
            | jq -r '.[].name' \
            | grep -E '^FEX-[0-9]+(\.[0-9]+)?$' \
            | LC_ALL=C sort -V > /tmp/tags.txt

          awk '
            function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");for(i=1;i<=2;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
            /^FEX-[0-9]+(\.[0-9]+)?$/ { base=substr($0,5); if (cmp(base,"2508")>=0) print $0 }
          ' /tmp/tags.txt > /tmp/candidates.txt

          : > /tmp/to_build.txt
          while read -r tag; do
            [ -n "$tag" ] || continue
            base="${tag#FEX-}"
            if ! grep -Fxq "$base" /tmp/exist.txt; then
              echo "$tag $base" >> /tmp/to_build.txt
            fi
          done < /tmp/candidates.txt

          if [[ -s /tmp/to_build.txt ]]; then
            echo 'list<<EOF' >> "$GITHUB_OUTPUT"
            cat /tmp/to_build.txt >> "$GITHUB_OUTPUT"
            echo 'EOF' >> "$GITHUB_OUTPUT"
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "list=" >> "$GITHUB_OUTPUT"
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

  build-and-release:
    name: Build & release missing versions
    runs-on: ${{ fromJSON( (format('{0}', inputs.use_self_hosted) == 'true' && '["self-hosted"]') || '["ubuntu-latest"]' ) }}
    needs: guard
    if: needs.guard.outputs.build == 'true'
    timeout-minutes: 60
    permissions:
      contents: write
    env:
      FEX_REPO: ${{ vars.FEX_REPO || 'FEX-Emu/FEX' }}
      TOOLCHAIN_DIR: /opt/llvm-mingw
      RELEASE_TAG: FEXCore
      GH_TOKEN: ${{ github.token }}
      LLVM_MINGW_TAG: ${{ vars.LLVM_MINGW_TAG || '20250920' }}
      DO_EC_HOTFIX: ${{ (github.event_name != 'workflow_dispatch') || inputs.arm64ec_module_hotfix }}
    steps:
      - name: Install host tooling (lean set; no cache)
        run: |
          sudo apt-get -yqq update
          sudo apt-get -yqq install --no-install-recommends \
            curl xz-utils jq ca-certificates \
            git ninja-build cmake pkg-config util-linux \
            build-essential python3 zstd gh perl dos2unix

      - name: Download pinned llvm-mingw
        env:
          TAG: ${{ env.LLVM_MINGW_TAG }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          gh release download "$TAG" -R bylaws/llvm-mingw \
            -p '*ucrt-ubuntu-22.04-x86_64.tar.xz' -O /tmp/llvm-mingw.tar.xz --clobber
          sudo mkdir -p /opt/llvm-mingw
          sudo tar -C /opt/llvm-mingw --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz
          echo "/opt/llvm-mingw/bin" >> "$GITHUB_PATH"

      - name: Pre-clean workspace (self-hosted)
        run: |
          set -Eeuo pipefail
          test -n "${GITHUB_WORKSPACE}" && test -d "${GITHUB_WORKSPACE}"
          rm -rf "${GITHUB_WORKSPACE}/src" \
                 "${GITHUB_WORKSPACE}/pkg" \
                 "${GITHUB_WORKSPACE}/FEXCore_WCP" \
                 "${GITHUB_WORKSPACE}/out"

      - name: Clone FEX
        run: |
          set -Eeuo pipefail
          git clone --recurse-submodules https://github.com/${FEX_REPO}.git src
          cd src && git fetch --tags --force

      - name: Configure git identity
        run: |
          git -C src config user.name "FEXCore Builder"
          git -C src config user.email "builder@users.noreply.github.com"

      - name: Build (ARM64EC + AArch64)
        env:
          TO_BUILD: ${{ needs.guard.outputs.to_build }}
          DO_EC_HOTFIX: ${{ (github.event_name != 'workflow_dispatch') || inputs.arm64ec_module_hotfix }}
        run: |
          set -Eeuo pipefail
          OUT="${GITHUB_WORKSPACE}/out"; mkdir -p "$OUT"
          cd "${GITHUB_WORKSPACE}/src"

          LIST="$(mktemp)"
          printf '%s\n' "${TO_BUILD}" | sed '/^\s*$/d' > "$LIST"
          if [[ ! -s "$LIST" ]]; then
            echo "No new versions to build."
            exit 0
          fi

          apply_ec_hotfix_strict() {
            local FILE="Source/Windows/ARM64EC/Module.S"

            [[ -f "$FILE" ]] || { echo "::error::File not found: $FILE"; return 1; }
            # CRLF 방지
            dos2unix -q "$FILE" || true

            local L1='  ldursw x23, [x17, #-0x4] // Load either the entry thunk offset or the calling instruction.'
            local L2='  cmp w23, w16'
            local L3='  and x23, x23, #-0x4'
            local L4='  add x17, x17, x23 // Resolve entry thunk address.'

            for n in "$L1" "$L2" "$L3" "$L4"; do
              grep -Fqx -- "$n" "$FILE" || {
                echo "::error::Upstream drift in $FILE (expected line missing): [$n]"
                return 1
              }
            done

            perl -0777 -i -pe \
              's{^\Q  ldursw x23, [x17, #-0x4] // Load either the entry thunk offset or the calling instruction.\E$}{  ldursw x12, [x17, #-0x4] // Load either the entry thunk offset or the calling instruction. [CI hotfix: x23->x12]}m;
               s{^\Q  cmp w23, w16\E$}{  cmp w12, w16}m;
               s{^\Q  and x23, x23, #-0x4\E$}{  and x12, x12, #-0x4}m;
               s{^\Q  add x17, x17, x23 // Resolve entry thunk address.\E$}{  add x17, x17, x12 // Resolve entry thunk address.}m;' \
              "$FILE"

            local NEW1='  ldursw x12, [x17, #-0x4] // Load either the entry thunk offset or the calling instruction. [CI hotfix: x23->x12]'
            local NEW2='  cmp w12, w16'
            local NEW3='  and x12, x12, #-0x4'
            local NEW4='  add x17, x17, x12 // Resolve entry thunk address.'

            for n in "$NEW1" "$NEW2" "$NEW3" "$NEW4"; do
              grep -Fqx -- "$n" "$FILE" || {
                echo "::error::Patched line missing: [$n]"
                return 1
              }
            done
            for n in "$L1" "$L2" "$L3" "$L4"; do
              ! grep -Fqx -- "$n" "$FILE" || {
                echo "::error::Old line still present after patch: [$n]"
                return 1
              }
            done

            echo "::notice::Applied strict Module.S hotfix at $FILE"
          }

          while read -r tag base; do
            echo "::group::Build ${tag} (FEXCore)"

            git reset --hard
            git clean -fdx
            git checkout -f "$tag"
            git submodule update --init --recursive --checkout

            if [[ "${DO_EC_HOTFIX}" == "true" ]]; then
              apply_ec_hotfix_strict || { echo "::error::EC hotfix failed on ${tag}"; exit 1; }
            else
              echo "::warning::EC hotfix disabled by input. You will see x23/w23 warnings."
            fi

            # Stage dirs for split installs
            STAGE_ARM64EC="${GITHUB_WORKSPACE}/stage-arm64ec-${base}"
            STAGE_AARCH64="${GITHUB_WORKSPACE}/stage-aarch64-${base}"
            rm -rf "$STAGE_ARM64EC" "$STAGE_AARCH64"
            mkdir -p "$STAGE_ARM64EC" "$STAGE_AARCH64"

            # Build: ARM64EC (x86_64 emu module)
            rm -rf build-arm64ec && mkdir build-arm64ec && cd build-arm64ec
            cmake -GNinja \
              --log-level=WARNING \
              -Wno-dev \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=../Data/CMake/toolchain_mingw.cmake \
              -DCMAKE_INSTALL_LIBDIR=/usr/lib/wine/aarch64-windows \
              -DENABLE_LTO=False \
              -DMINGW_TRIPLE=arm64ec-w64-mingw32 \
              -DBUILD_TESTING=False \
              -DENABLE_JEMALLOC_GLIBC_ALLOC=False \
              -DCMAKE_INSTALL_PREFIX=/usr ..
            NINJA_STATUS="" ninja
            DESTDIR="$STAGE_ARM64EC" ninja install
            cd ..

            git restore --worktree --staged -- "Source/Windows/ARM64EC/Module.S" || git checkout -- "Source/Windows/ARM64EC/Module.S"
            echo "::notice::Reverted Module.S to HEAD for AArch64 build"

            # Build: AArch64 (WOW64 emu module)
            rm -rf build-wow64 && mkdir build-wow64 && cd build-wow64
            cmake -GNinja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=../Data/CMake/toolchain_mingw.cmake \
              -DCMAKE_INSTALL_LIBDIR=/usr/lib/wine/aarch64-windows \
              -DENABLE_LTO=False \
              -DMINGW_TRIPLE=aarch64-w64-mingw32 \
              -DBUILD_TESTING=False \
              -DENABLE_JEMALLOC_GLIBC_ALLOC=False \
              -DCMAKE_INSTALL_PREFIX=/usr ..
            NINJA_STATUS="" ninja
            DESTDIR="$STAGE_AARCH64" ninja install
            cd ..

            WCP_DIR="${GITHUB_WORKSPACE}/FEXCore_WCP"
            rm -rf "$WCP_DIR" && mkdir -p "$WCP_DIR/system32"

            for ST in "$STAGE_ARM64EC" "$STAGE_AARCH64"; do
              SRC="$ST/usr/lib/wine/aarch64-windows"
              if [[ -d "$SRC" ]]; then
                find "$SRC" -type f -name '*.dll' -exec cp {} "$WCP_DIR/system32/" \;
              else
                echo "::warning::Expected install dir not found: $SRC"
              fi
            done

            if command -v llvm-strip >/dev/null 2>&1; then
              find "$WCP_DIR/system32" -type f -name '*.dll' -print0 | xargs -0 -I{} llvm-strip -s "{}" || true
            fi

            (cd "$WCP_DIR" && find system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | LC_ALL=C sort) > /tmp/s32.txt || true
            if [[ ! -s /tmp/s32.txt ]]; then
              echo "::error::No DLLs discovered in system32 for ${tag}"
              exit 1
            fi

            CLEAN_TAG="$base"
            jq -n \
              --arg VER "${CLEAN_TAG}" \
              --arg DESC "FEXCore Automated Build (Built by Ari's Winlator WCP Hub. Upstream: bylaws)" \
              --argjson VC 0 \
              --slurpfile S32 <(find "$WCP_DIR/system32" -maxdepth 1 -type f -name '*.dll' -printf '%f\n' \
                                | jq -Rn '[inputs | {source: ("system32/"+.), target: ("${system32}/"+.)}]') \
              '{
                type: "FEXCore",
                versionName: $VER,
                versionCode: $VC,
                description: $DESC,
                files: ($S32[0] // [])
              }' > "$WCP_DIR/profile.json"

            # Create .wcp and move next to raw DLLs
            tar --zstd -C "$WCP_DIR" \
              --format=gnu --owner=0 --group=0 --numeric-owner \
              --sort=name \
              -cf "${OUT}/FEXCore-${CLEAN_TAG}.wcp" profile.json system32

            echo "::endgroup::"
          done < "$LIST"

      - name: Build release notes
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          printf '🤖 Automated FEXCore builds (2508+)\n\n' > "$NOTES"
          if compgen -G "${GITHUB_WORKSPACE}/out/FEXCore-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/FEXCore-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            ver="${latest#FEXCore-}"; ver="${ver%.wcp}"
            echo "Current: ${ver}" >> "$NOTES"
          fi
          cat "$NOTES"

      - name: Create/Update GitHub Release (FEXCore) + upload WCPs
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="FEXCore"

          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi

          if compgen -G "${GITHUB_WORKSPACE}/out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" "${GITHUB_WORKSPACE}/out/"*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
