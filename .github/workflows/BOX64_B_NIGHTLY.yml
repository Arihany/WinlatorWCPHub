name: Box64-Bionic Nightly

on:
  workflow_dispatch:
    inputs:
      use_self_hosted:
        type: boolean
        default: false
        description: "true= self-hosted, false= github runner"
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  resolve-latest:
    name: Resolve upstream HEAD (commit) + derive develop version
    runs-on: ${{ fromJSON( (format('{0}', inputs.use_self_hosted) == 'true' && '["self-hosted"]') || '["ubuntu-latest"]' ) }}
    outputs:
      sha:        ${{ steps.upstream.outputs.sha }}
      short:      ${{ steps.upstream.outputs.short }}
      datecode:   ${{ steps.datecode.outputs.code }}
      stable:     ${{ steps.ver.outputs.stable }}
      stable_tag: ${{ steps.ver.outputs.stable_tag }}
      develop:    ${{ steps.ver.outputs.develop }}
    steps:
      - name: Install tools (jq, curl)
        run: |
          set -Eeuo pipefail
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl ca-certificates

      - name: Resolve upstream Box64 HEAD SHA (robust)
        id: upstream
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          OWNER="ptitSeb"
          REPO="box64"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-box64-bionic-nightly}")
          ver=(-H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ua[@]}" "${ver[@]}" "$1"; }

          default_branch="$(fetch "$API/repos/$OWNER/$REPO" | jq -r .default_branch)"
          [[ -z "$default_branch" || "$default_branch" == "null" ]] && default_branch="main"

          sha="$(fetch "$API/repos/$OWNER/$REPO/commits/${default_branch}" | jq -r .sha)"
          [[ -z "$sha" || "$sha" == "null" ]] && { echo "::error::Failed to resolve upstream HEAD SHA"; exit 1; }

          short="$(printf '%s' "$sha" | cut -c1-7)"
          echo "sha=${sha}"     >> "$GITHUB_OUTPUT"
          echo "short=${short}" >> "$GITHUB_OUTPUT"
          echo "Upstream ${default_branch} @ ${short}"

      - name: Resolve latest stable tag and derive develop version (evenâ†’odd)
        id: ver
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          OWNER="ptitSeb"; REPO="box64"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-box64-bionic-nightly}")
          ver=(-H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ua[@]}" "${ver[@]}" "$1"; }

          releases="$(fetch "$API/repos/$OWNER/$REPO/releases?per_page=100")"

          stable_tag="$(
            jq -r '
              [ .[] | select(.draft==false)
                | .tag_name
                | select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))
                | capture("^v(?<maj>[0-9]+)\\.(?<min>[0-9]+)\\.(?<pat>[0-9]+)$")
                | .maj|=tonumber | .min|=tonumber | .pat|=tonumber
              ]
              | sort_by(.maj, .min, .pat)
              | last
              | if . then "v\(.maj).\(.min).\(.pat)" else "" end
            ' <<<"$releases"
          )"

          if [[ -z "$stable_tag" ]]; then
            echo "::error::Failed to resolve latest stable tag"; exit 1
          fi

          stable="${stable_tag#v}"
          IFS=. read -r MAJ MIN PAT <<<"$stable"
          : "${MAJ:?}"; : "${MIN:?}"; : "${PAT:?}"

          DEV_PATCH=$((PAT + 1))
          DEV="${MAJ}.${MIN}.${DEV_PATCH}"

          {
            echo "stable=${stable}"
            echo "stable_tag=${stable_tag}"
            echo "develop=${DEV}"
          } >> "$GITHUB_OUTPUT"

          echo "Stable=${stable_tag}, Develop=${DEV}"

      - name: Decide date code
        id: datecode
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> "$GITHUB_OUTPUT"

  build-android-bionic:
    name: Build & release ${{ needs.resolve-latest.outputs.short }}
    needs: [resolve-latest]
    runs-on: ${{ fromJSON( (format('{0}', inputs.use_self_hosted) == 'true' && '["self-hosted"]') || '["ubuntu-latest"]' ) }}
    env:
      NDK_VERSION: r26b
      BUILD_TYPE:  Release

    steps:
      - name: Skip if already built same commit (API-based)
        id: guard_commit
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
          SHA:      ${{ needs.resolve-latest.outputs.sha }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/${REPO}/releases/tags/BOX64-BIONIC-NIGHTLY"
          HTTP="$(curl -s -o /tmp/release.json -w '%{http_code}' \
                   -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$API" || true)"
          if [ "$HTTP" = "200" ] && jq -e --arg S "$SHA" '.body | contains($S)' /tmp/release.json >/dev/null; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "Same upstream commit already released; skipping."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip if same-version asset exists (develop semver + date + short)
        id: dupe
        if: steps.guard_commit.outputs.skip != 'true'
        env:
          GH_TOKEN:  ${{ github.token }}
          REPO:      ${{ github.repository }}
          VERSION:   ${{ needs.resolve-latest.outputs.develop }}
          DATECODE:  ${{ needs.resolve-latest.outputs.datecode }}
          SHORT:     ${{ needs.resolve-latest.outputs.short }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          FILENAME="box64-bionic-${VERSION}-${DATECODE}-${SHORT}.wcp"
          HTTP="$(curl -s -o /tmp/nightly.json -w '%{http_code}' \
                  -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
                  "$API/repos/${REPO}/releases/tags/BOX64-BIONIC-NIGHTLY" || true)"
          if [ "$HTTP" = "200" ] && jq -e --arg N "$FILENAME" '.assets[]?.name == $N' /tmp/nightly.json >/dev/null; then
            echo "skip=true"  >> "$GITHUB_OUTPUT"
            echo "Found asset ${FILENAME}; skipping build."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install build deps (minimal)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            git cmake make ninja-build python3 zstd file jq curl unzip ca-certificates \
            binutils  # readelf/strip

      - name: Checkout upstream Box64 (exact commit)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          ref: ${{ needs.resolve-latest.outputs.sha }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Prepare Android NDK r26b (idempotent)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          API_LEVEL: 31
        run: |
          set -Eeuo pipefail
          NDK_BASE="android-ndk-${NDK_VERSION}"
          URL="https://dl.google.com/android/repository/${NDK_BASE}-linux.zip"
          NDK_DIR="${RUNNER_TEMP:-$PWD}/${NDK_BASE}"

          if [[ -d "$NDK_DIR" && ! -x "$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang" ]]; then
            echo "::warning::Stale or partial NDK at $NDK_DIR; removing"
            rm -rf "$NDK_DIR"
          fi

          if [[ ! -d "$NDK_DIR" ]]; then
            curl -fsSL -o ndk.zip "$URL"
            unzip -q -o ndk.zip -d "${RUNNER_TEMP:-$PWD}"
          else
            echo "Reusing existing NDK at $NDK_DIR"
          fi

          echo "NDK=$NDK_DIR" >> $GITHUB_ENV
          echo "BOX64_COMPILER=$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang" >> $GITHUB_ENV
          echo "BOX64_PLATFORM_MACRO=-DANDROID=1 -DARM_DYNAREC=1 -DBAD_SIGNAL=1" >> $GITHUB_ENV

      - name: Configure (CMake, upstream-like flags)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          cd src
          mkdir -p build && cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_C_COMPILER="${BOX64_COMPILER}" \
            ${BOX64_PLATFORM_MACRO} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
            -DZYDIS3=0 \
            -DSTATICBUILD=0 \
            -DBOX32=0
          cd -

      - name: Build (parallel)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: cmake --build src/build -j"$(nproc)"

      - name: Strip binary (safe, keep needed symbols)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          BIN="src/build/box64"
          [[ -f "$BIN" ]] || { echo "::error::Missing binary: $BIN"; exit 1; }
          STRIP_BIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
          if [[ -x "$STRIP_BIN" ]]; then
            "$STRIP_BIN" --strip-unneeded "$BIN"
          else
            strip --strip-unneeded "$BIN"
          fi
          file "$BIN"

      - name: Verify ELF (Bionic traits)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          echo "---- INTERP ----"
          readelf -lW src/build/box64 | sed -n 's/.*Requesting program interpreter: *//p'
          echo "---- NEEDED ----"
          readelf -dW src/build/box64 | awk '/NEEDED/{print $0}'
          echo "---- ANDROID NOTE ----"
          readelf -nW src/build/box64 | sed -n '/.note.android.ident/,/Displaying/p'

      - name: Package WCP (develop semver + date + short SHA)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
          SHORT:    ${{ needs.resolve-latest.outputs.short }}
          DEV:      ${{ needs.resolve-latest.outputs.develop }}
        run: |
          set -Eeuo pipefail
          mkdir -p Box64_WCP artifacts
          cp src/build/box64 Box64_WCP/box64
          chmod +x Box64_WCP/box64 || true

          cat > Box64_WCP/profile.json <<JSON
          {
            "type": "Box64",
            "versionName": "${DEV}-${SHORT}",
            "versionCode": ${DATECODE},
            "description": "Box64-Bionic-Nightly $DEV-$SHORT Automated Build (Built by Ari's Winlator WCP Hub. Upstream: ptitSeb)",
            "files": [
              { "source": "box64", "target": "\${bindir}/box64" }
            ]
          }
          JSON

          (cd Box64_WCP && tar --zstd --format=gnu --owner=0 --group=0 --numeric-owner --sort=name \
                -cf "../artifacts/box64-bionic-${DEV}-${DATECODE}-${SHORT}.wcp" profile.json box64)

      - name: Ensure/Update release (BOX64-BIONIC-NIGHTLY)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN:  ${{ github.token }}
          REPO:      ${{ github.repository }}
          SHORT:     ${{ needs.resolve-latest.outputs.short }}
          SHA:       ${{ needs.resolve-latest.outputs.sha }}
          DATECODE:  ${{ needs.resolve-latest.outputs.datecode }}
          DEV:       ${{ needs.resolve-latest.outputs.develop }}
          STABLE:    ${{ needs.resolve-latest.outputs.stable }}
        run: |
          set -Eeuo pipefail
          printf -v BODY '%s\n\n%s\n%s' \
            'ðŸŒ™ Automated BOX64 Bionic nightly builds (rolling)' \
            "Current: ${DEV}-${DATECODE}(YYMMDD)-[${SHORT}](https://github.com/ptitSeb/box64/commit/${SHA})"

          if ! gh release view "BOX64-BIONIC-NIGHTLY" --repo "$REPO" >/dev/null 2>&1; then
            gh release create "BOX64-BIONIC-NIGHTLY" --repo "$REPO" \
              -t "BOX64-BIONIC-NIGHTLY" -n "$BODY"
          else
            gh release edit "BOX64-BIONIC-NIGHTLY" --repo "$REPO" \
              -t "BOX64-BIONIC-NIGHTLY" -n "$BODY"
          fi

          gh release upload "BOX64-BIONIC-NIGHTLY" \
            "./artifacts/box64-bionic-${DEV}-${DATECODE}-${SHORT}.wcp" \
            --repo "$REPO" --clobber
