name: FEX Nightly

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: write

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  resolve-latest:
    name: Resolve upstream HEAD (commit)
    runs-on: ubuntu-latest
    outputs:
      branch:   ${{ steps.upstream.outputs.branch }}
      sha:      ${{ steps.upstream.outputs.sha }}
      short:    ${{ steps.upstream.outputs.short }}
      datecode: ${{ steps.datecode.outputs.code }}
    steps:
      - name: Install tools (jq, curl)
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends jq curl

      - name: Resolve upstream FEX HEAD SHA (robust)
        id: upstream
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          OWNER="FEX-Emu"
          REPO="FEX"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-fexcore-nightly-workflow}")
          ver=(-H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ua[@]}" "${ver[@]}" "$1"; }

          branch="$(fetch "$API/repos/$OWNER/$REPO" | jq -r .default_branch)"
          [[ -z "$branch" || "$branch" == "null" ]] && branch="main"

          sha="$(fetch "$API/repos/$OWNER/$REPO/commits/${branch}" | jq -r .sha)"
          [[ -z "$sha" || "$sha" == "null" ]] && { echo "::error::Failed to resolve upstream HEAD SHA"; exit 1; }

          short="$(printf '%s' "$sha" | cut -c1-7)"

          echo "branch=${branch}" >> "$GITHUB_OUTPUT"
          echo "sha=${sha}"       >> "$GITHUB_OUTPUT"
          echo "short=${short}"   >> "$GITHUB_OUTPUT"
          echo "Upstream ${branch} @ ${short}"

      - name: Decide date code (YYMMDD, KST)
        id: datecode
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> "$GITHUB_OUTPUT"

  compile-fexcore:
    name: Build & append ${{ needs.resolve-latest.outputs.short }}
    needs: [resolve-latest]
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Install guard tools (gh, jq, curl)
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends gh jq curl

      # Ultra-light guard: skip early if the exact upstream commit is already released
      - name: Skip if same upstream commit already released
        id: guard_commit
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
          SHA:      ${{ needs.resolve-latest.outputs.sha }}
        run: |
          set -Eeuo pipefail
          BODY="$(gh release view FEX-NIGHTLY --repo "$REPO" --json body --jq '.body' 2>/dev/null || true)"
          if echo "$BODY" | grep -q "commit/${SHA}"; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "Same upstream commit already released; skipping."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      # Optional guard: avoid duplicate upload when the same date asset exists
      - name: Skip if same-date asset exists
        id: dupe
        if: steps.guard_commit.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          filename="fex-nightly-${DATECODE}.wcp"

          HTTP="$(curl -s -o /tmp/nightly.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/FEX-NIGHTLY" || true)"

          if [[ "$HTTP" == "200" ]] && jq -e --arg N "$filename" 'any(.assets[]?; .name==$N)' /tmp/nightly.json >/dev/null; then
            echo "skip=true"  >> "$GITHUB_OUTPUT"
            echo "Found asset ${filename} in release FEX-NIGHTLY; skipping build."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Nix
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install build tools
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            jq zstd curl wget git cmake ninja-build build-essential binutils xz-utils

      - name: Install llvm-mingw toolchain (Linux aarch64 host) and set PATH
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
      
          echo "Fetching latest llvm-mingw release for Linux aarch64 host..."
          url="$(
            curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ver[@]}" "$API" \
            | jq -r '
                (
                  # 1st try: aarch64 + (ubuntu|linux) + tar.{xz,gz}
                  [ .assets[]
                    | select(.name | test("(aarch64|arm64).*(ubuntu|linux).*(tar\\.(xz|gz))$"; "i"))
                    | .browser_download_url
                  ]
                  +
                  # Fallback: aarch64 tarball, but NOT darwin/apple
                  [ .assets[]
                    | select((.name | test("aarch64.*(tar\\.(xz|gz))$"; "i"))
                             and (.name | test("(darwin|apple)"; "i") | not))
                    | .browser_download_url
                  ]
                )[0]
              '
          )"
          [[ -z "$url" || "$url" == "null" ]] && { echo "::error::llvm-mingw aarch64 tarball not found (linux/ubuntu)"; exit 1; }
      
          mkdir -p "$HOME/.toolchains/llvm-mingw"
          tmpd="$(mktemp -d)"; cd "$tmpd"
          echo "Downloading: $url"
          curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors -o toolchain.tar "$url"
          tar -xf toolchain.tar -C "$HOME/.toolchains/llvm-mingw" --strip-components=1
      
          echo "$HOME/.toolchains/llvm-mingw/bin" >> "$GITHUB_PATH"
          ls "$HOME/.toolchains/llvm-mingw/bin" | grep -E '^(arm64ec|aarch64)-w64-mingw32-.*clang$' >/dev/null \
            || { echo "::error::Expected triplet compilers not found in llvm-mingw bin/"; exit 1; }

      - name: Checkout upstream FEX (exact commit)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: FEX-Emu/FEX
          ref: ${{ needs.resolve-latest.outputs.sha }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Compile FEXCore with standard flags
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail

          # Common flags suggested by the standard guide
          COMMON_FLAGS=(
            -DCMAKE_BUILD_TYPE=Release
            -DENABLE_LTO=False
            -DBUILD_TESTS=False
            -DENABLE_JEMALLOC_GLIBC_ALLOC=False
            -DTUNE_CPU=none
          )

          # ARM64EC (Windows ARM64EC)
          mkdir -p src/build/arm64ec && cd src/build/arm64ec
          ../../Data/nix/cmake_configure_woa64.sh ../../ -G Ninja \
            "${COMMON_FLAGS[@]}" \
            -DMINGW_TRIPLE=arm64ec-w64-mingw32 \
            -DCMAKE_INSTALL_PREFIX="$PWD/dist" \
            -DCMAKE_INSTALL_LIBDIR=lib/wine/aarch64-windows
          ninja -v
          ninja install
          cd ../../..

          # WOW64 (Windows x86-on-ARM; FEX translator side, ARM64 host DLL)
          mkdir -p src/build/wow64 && cd src/build/wow64
          ../../Data/nix/cmake_configure_woa32.sh ../../ -G Ninja \
            "${COMMON_FLAGS[@]}" \
            -DMINGW_TRIPLE=aarch64-w64-mingw32 \
            -DCMAKE_INSTALL_PREFIX="$PWD/dist" \
            -DCMAKE_INSTALL_LIBDIR=lib/wine/aarch64-windows
          ninja -v
          ninja install
          cd ../../..

      # Nightly WCP 패키징은 요청대로 유지
      - name: Package Nightly WCP (lowercase filename)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          mkdir -p FEXCore_DLLs FEXCore_WCP/system32

          # Place BOTH ARM64EC and WOW64 into system32 (intentional for this app)
          cp -v ./src/build/arm64ec/Bin/libarm64ecfex.dll ./FEXCore_DLLs/ || true
          cp -v ./src/build/wow64/Bin/libwow64fex.dll   ./FEXCore_DLLs/ || true
          cp -v ./src/build/arm64ec/Bin/libarm64ecfex.dll ./FEXCore_WCP/system32/ || true
          cp -v ./src/build/wow64/Bin/libwow64fex.dll   ./FEXCore_WCP/system32/ || true

          # Optional strip (prefer llvm-strip; otherwise skip)
          if command -v llvm-strip >/dev/null 2>&1; then
            for f in ./FEXCore_WCP/system32/*.dll; do
              [ -f "$f" ] && llvm-strip "$f" || true
            done
          fi

          # Sanity check: ensure at least one DLL exists
          if ! compgen -G "FEXCore_WCP/system32/*.dll" >/dev/null; then
            echo "::error::No DLLs found under FEXCore_WCP/system32"; exit 1
          fi

          # Build profile.json from discovered DLLs
          (find FEXCore_WCP/system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/files.txt
          jq -Rn '[inputs | {source: ("system32/"+.), target: ("${system32}/"+.)}]' \
            < /tmp/files.txt > /tmp/files.json

          DESC="${DATECODE} FEXCore build by Ari"
          jq -n \
            --argjson VC "${DATECODE}" \
            --arg DESC "$DESC" \
            --slurpfile F /tmp/files.json \
            '{
              type: "FEXCore",
              versionName: "nightly",
              versionCode: $VC,
              description: $DESC,
              files: ($F[0] // [])
            }' > FEXCore_WCP/profile.json

          tar --zstd -C FEXCore_WCP \
            --format=gnu --owner=0 --group=0 --numeric-owner \
            -cf "fex-nightly-${DATECODE}.wcp" profile.json system32

          mv -v "fex-nightly-${DATECODE}.wcp" FEXCore_DLLs/

      - name: Ensure/Update release (tag = FEX-NIGHTLY) and upload asset
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
          SHORT:    ${{ needs.resolve-latest.outputs.short }}
          SHA:      ${{ needs.resolve-latest.outputs.sha }}
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          BODY=$'🌙 Automated FEX nightly builds (rolling)\n\nCommit: ['"${SHORT}"'](https://github.com/FEX-Emu/FEX/commit/'"${SHA}"')'

          if ! gh release view "FEX-NIGHTLY" --repo "$REPO" >/dev/null 2>&1; then
            gh release create "FEX-NIGHTLY" --repo "$REPO" -t "FEX-NIGHTLY" -n "${BODY}"
          else
            gh release edit   "FEX-NIGHTLY" --repo "$REPO" -t "FEX-NIGHTLY" -n "${BODY}"
          fi

          gh release upload "FEX-NIGHTLY" \
            "./FEXCore_DLLs/fex-nightly-${DATECODE}.wcp" \
            --repo "$REPO" --clobber

      - name: Trim old assets (keep latest 5)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          API="https://api.github.com/repos/${REPO}/releases/tags/FEX-NIGHTLY"
          assets="$(curl -s -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$API" | jq -c '.assets | sort_by(.created_at)')"
          count="$(echo "$assets" | jq 'length')"
          if [ "$count" -gt 5 ]; then
            delcount=$((count-5))
            echo "::notice::Found $count assets, will delete $delcount oldest."
            echo "$assets" | jq -r ".[0:$delcount][] | .id" | while read -r id; do
              curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${REPO}/releases/assets/${id}"
              echo "Deleted asset id=$id"
            done
          else
            echo "::notice::Asset count $count (≤5); nothing to delete."
          fi
