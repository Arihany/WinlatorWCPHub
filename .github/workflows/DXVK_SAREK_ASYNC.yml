name: DXVK-SAREK-ASYNC
# mstorsjo LLVM_MINGW 20250910
# 1.11.0+

on:
  workflow_dispatch:
    inputs:
      use_self_hosted:
        type: boolean
        default: false
        description: "true= self-hosted, false= github runner"
  schedule:
  - cron: "0 18 * * *"

permissions:
  contents: read

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Check Update
    runs-on: ${{ fromJSON( (format('{0}', inputs.use_self_hosted) == 'true' && '["self-hosted"]') || '["ubuntu-latest"]' ) }}
    timeout-minutes: 5
    outputs:
      build:    ${{ steps.detect.outputs.missing }}
      to_build: ${{ steps.detect.outputs.list }}
    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SAREK_REPO: pythonlover02/DXVK-Sarek
      RELEASE_TAG: DXVK-SAREK-ASYNC
    steps:
      - name: Install jq, curl (minimal)
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl ca-certificates

      - name: Collect already-published versions
        id: have
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          HTTP="$(curl -s -o /tmp/rel.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/${RELEASE_TAG}" || true)"
          if [ "$HTTP" = "200" ]; then
            jq -r '.assets[].name' /tmp/rel.json \
              | sed -n -E 's/^dxvk-sarek-async-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
              | sort -V > /tmp/exist.txt
          else
            : > /tmp/exist.txt
          fi
          echo "Existing:"; cat /tmp/exist.txt || true

      - name: Detect ALL missing candidates and export list
        id: detect
        env:
          SAREK_REPO: ${{ env.SAREK_REPO }}
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")

          : > /tmp/upstream_async.txt
          page=1
          while :; do
            url="$API/repos/${SAREK_REPO}/releases?per_page=100&page=${page}"
            HTTP="$(curl -sS -w '%{http_code}' -o /tmp/rels.json "${auth[@]}" "${ver[@]}" "$url")"
            [ "$HTTP" = "200" ] || { echo "::error::Upstream releases query failed: HTTP $HTTP"; break; }
        
            jq -r '
              .[] | select(.draft==false and .prerelease==false)
              | .assets[]? | .name
            ' /tmp/rels.json \
            | sed -n -E 's/^dxvk-sarek-async-v([0-9]+\.[0-9]+(\.[0-9]+)?)\.tar\.gz$/\1/p' \
            >> /tmp/upstream_async.txt

            [ "$(jq 'length' /tmp/rels.json)" -lt 100 ] && break
            page=$((page+1))
          done

          if [ ! -s /tmp/upstream_async.txt ]; then
            echo "list=" >> "$GITHUB_OUTPUT"
            echo "missing=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
        
          LC_ALL=C sort -V -u /tmp/upstream_async.txt > /tmp/candidates.txt

          awk '
            function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
            { if (cmp($0,"1.11.0")>=0) print }
          ' /tmp/candidates.txt > /tmp/candidates_111.txt

          : > /tmp/to_build.txt
          while read -r base; do
            [ -n "$base" ] || continue
            if ! grep -Fxq "$base" /tmp/exist.txt; then
              echo "v${base} ${base}" >> /tmp/to_build.txt
            fi
          done < /tmp/candidates_111.txt
        
          if [[ -s /tmp/to_build.txt ]]; then
            {
              echo 'list<<EOF'
              cat /tmp/to_build.txt
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "list=" >> "$GITHUB_OUTPUT"
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

  build-and-release:
    name: Build & release missing versions
    runs-on: ${{ fromJSON( (format('{0}', inputs.use_self_hosted) == 'true' && '["self-hosted"]') || '["ubuntu-latest"]' ) }}
    needs: guard
    if: needs.guard.outputs.build == 'true'
    timeout-minutes: 60
    permissions:
      contents: write
    env:
      SAREK_REPO:   pythonlover02/DXVK-Sarek
      SAREK_BRANCH: async
      TOOLCHAIN_DIR: /opt/llvm-mingw
      RELEASE_TAG:  DXVK-SAREK-ASYNC
      GH_TOKEN:     ${{ github.token }}
      LLVM_MINGW_TAG: ${{ vars.LLVM_MINGW_TAG || '20250910' }}
    steps:
      - name: Install host tooling (lean set; no cache)
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            curl xz-utils jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            build-essential python3 zstd gh

      - name: Download pinned llvm-mingw (UCRT)
        id: llvm
        env:
          TAG: ${{ env.LLVM_MINGW_TAG }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/mstorsjo/llvm-mingw/releases/tags/${TAG}"
          json=$(curl -fsSL --retry 3 --retry-delay 2 -H "Authorization: Bearer $GH_TOKEN" "$API" || true)

          pick_url() {
            local json="$1"
            local url=""
            for dist in 24.04 22.04 20.04; do
              url=$(jq -r --arg dist "$dist" '
                .assets[]?
                | select(.name | endswith("ucrt-ubuntu-" + $dist + "-x86_64.tar.xz"))
                | .browser_download_url
              ' <<<"$json" | head -n1 || true)
              [[ -n "$url" && "$url" != "null" ]] && { echo "$url"; return 0; }
            done
            return 1
          }

          url="$(pick_url "$json" || true)"
          if [[ -z "${url:-}" ]]; then
            echo "::warning::Pinned llvm-mingw ${TAG} asset not found; falling back to latest"
            json=$(curl -fsSL --retry 3 --retry-delay 2 -H "Authorization: Bearer $GH_TOKEN" \
                   https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest || true)
            url="$(pick_url "$json" || true)"
          fi

          [[ -n "${url:-}" ]] || { echo "::error::llvm-mingw asset not found"; exit 1; }

          TOOLCHAIN_DIR=/opt/llvm-mingw
          sudo mkdir -p "$TOOLCHAIN_DIR"
          curl -fL --retry 3 --retry-delay 2 -H "Authorization: Bearer $GH_TOKEN" \
               "$url" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz
          echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"

      - name: Pre-clean workspace (self-hosted)
        run: |
          set -Eeuo pipefail
          test -n "${GITHUB_WORKSPACE}" && test -d "${GITHUB_WORKSPACE}"
          rm -rf "${GITHUB_WORKSPACE}/src" \
                 "${GITHUB_WORKSPACE}/pkg" \
                 "${GITHUB_WORKSPACE}/DXVK_WCP" \
                 "${GITHUB_WORKSPACE}/out"

      - name: Clone DXVK-Sarek (async branch per upstream guidance)
        env:
          SAREK_REPO: ${{ env.SAREK_REPO }}
          SAREK_BRANCH: ${{ env.SAREK_BRANCH }}
        run: |
          set -Eeuo pipefail
          git clone --branch "${SAREK_BRANCH}" --recurse-submodules https://github.com/${SAREK_REPO}.git src
          git -C src fetch --tags --force
          git -C src remote set-branches origin "${SAREK_BRANCH}"
          git -C src fetch origin "${SAREK_BRANCH}" --force

      - name: Configure git identity
        run: |
          git -C src config user.name "DXVK Builder"
          git -C src config user.email "builder@users.noreply.github.com"

      - name: Build NEW versions from async branch aligned to tag timestamp
        env:
          TO_BUILD: ${{ needs.guard.outputs.to_build }}
          SAREK_BRANCH: ${{ env.SAREK_BRANCH }}
        run: |
          set -Eeuo pipefail
          OUT="${GITHUB_WORKSPACE}/out"; mkdir -p "$OUT"
          cd "${GITHUB_WORKSPACE}/src"

          LIST="$(mktemp)"
          printf '%s\n' "${TO_BUILD}" | sed '/^\s*$/d' > "$LIST"
          if [[ ! -s "$LIST" ]]; then
            echo "No new versions to build."
            exit 0
          fi

          while read -r tag base; do
            echo "::group::Build ${tag} (async branch)"

            git reset --hard
            git clean -fdx
            git fetch origin "${SAREK_BRANCH}" --force
            git fetch --tags --force

            # Find async branch commit that is at or before the tag date
            tag_date="$(git log -1 --format=%cI "tags/${tag}" || true)"
            if [[ -n "$tag_date" ]]; then
              async_commit="$(git rev-list -1 --before="$tag_date" "origin/${SAREK_BRANCH}" || true)"
            fi
            if [[ -z "${async_commit:-}" ]]; then
              echo "::warning::Could not resolve async commit before tag date; falling back to origin/${SAREK_BRANCH} HEAD"
              async_commit="$(git rev-parse "origin/${SAREK_BRANCH}")"
            fi

            git checkout -f "$async_commit"
            git submodule sync --recursive
            git submodule update --init --recursive --checkout
            echo "Using async commit: $(git rev-parse --short HEAD) for ${tag} (tag date: ${tag_date:-unknown})"

            if git merge-base --is-ancestor "tags/${tag}" "$async_commit"; then
              echo "Async commit includes or follows ${tag}."
            else
              echo "::notice::Async commit may not include ${tag}; building closest state by timestamp."
            fi

            PKGDIR="${GITHUB_WORKSPACE}/pkg"
            mkdir -p "$PKGDIR"
            ./package-release.sh "$tag" "$PKGDIR" --no-package

            PKG_ROOT="${GITHUB_WORKSPACE}/pkg/dxvk-async-${tag}"
            PREFIX_X64="${PKG_ROOT}/x64"
            PREFIX_X86="${PKG_ROOT}/x32"
            [[ -d "${PREFIX_X64}/bin" ]] && PREFIX_X64="${PREFIX_X64}/bin"
            [[ -d "${PREFIX_X86}/bin" ]] && PREFIX_X86="${PREFIX_X86}/bin"

            WCP_DIR="${GITHUB_WORKSPACE}/DXVK_WCP"
            rm -rf "$WCP_DIR"
            mkdir -p "${WCP_DIR}/system32" "${WCP_DIR}/syswow64"

            cp -v "${PREFIX_X64}/"*.dll  "${WCP_DIR}/system32/" || true
            cp -v "${PREFIX_X86}/"*.dll  "${WCP_DIR}/syswow64/" || true

            if command -v llvm-strip >/dev/null 2>&1; then
              find "${WCP_DIR}" -type f -name '*.dll' -print0 | xargs -0 -I{} llvm-strip -s "{}" || true
            fi

            (cd "$WCP_DIR" && find system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | LC_ALL=C sort) > /tmp/x64.txt || true
            (cd "$WCP_DIR" && find syswow64 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | LC_ALL=C sort) > /tmp/x86.txt || true

            if [[ ! -s /tmp/x64.txt && ! -s /tmp/x86.txt ]]; then
              echo "::error::No DLLs discovered for ${tag}"
              exit 1
            fi

            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x64.txt  > /tmp/x64.json
            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x86.txt  > /tmp/x86.json

            jq -n \
              --arg DESC "DXVK-SAREK-Async Automated Build (Built by Ari's Winlator WCP Hub. Upstream: doitsujin, pythonlover02)" \
              --arg VN "sarek-async-${base}" \
              --argjson VC 0 \
              --arg SYS '${system32}/' \
              --arg WOW '${syswow64}/' \
              --slurpfile x64 /tmp/x64.json \
              --slurpfile x86 /tmp/x86.json \
              '
              ($x64[0] // []) as $A |
              ($x86[0] // []) as $B |
              {
                type: "DXVK",
                versionName: $VN,
                versionCode: $VC,
                description: $DESC,
                files: [
                  ($A[]? | {source: ("system32/"+ .), target: ($SYS + .)}),
                  ($B[]? | {source: ("syswow64/"+ .), target: ($WOW + .)})
                ]
              }' > "${WCP_DIR}/profile.json"

            tar -C "$WCP_DIR" --zstd --format=gnu --owner=0 --group=0 --numeric-owner \
              --sort=name \
              -cf "${OUT}/dxvk-sarek-async-${base}.wcp" profile.json system32 syswow64

            echo "::endgroup::"
          done < "$LIST"
          
      - name: Build release notes
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          printf '🤖 Automated DXVK-SAREK-Async builds (1.11.0+).\n\n' > "$NOTES"
          if compgen -G "${GITHUB_WORKSPACE}/out/dxvk-sarek-async-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/dxvk-sarek-async-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            ver="${latest#dxvk-sarek-async-}"; ver="${ver%.wcp}"
            echo "Current: ${ver}" >> "$NOTES"
          fi
          cat "$NOTES"

      - name: Create/Update GitHub Release (DXVK-Sarek) + upload WCPs
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="DXVK-SAREK-ASYNC"

          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi

          if compgen -G "${GITHUB_WORKSPACE}/out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" "${GITHUB_WORKSPACE}/out/"*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
